# AUTOGENERATED! DO NOT EDIT! File to edit: notebooks/01_label_data.ipynb (unless otherwise specified).

__all__ = ['create_labelled_data', 'fix_error_in_account_info_dataset', 'label_accounts', 'label_customers',
           'merge_label_with_main_data']

# Cell
import os
import pandas as pd
from sample_project import config
from sample_project.helper import write_to_csv, read_from_csv
from fastcore.utils import store_attr
import numpy as np

# Cell
def create_labelled_data(trnx_dataset = config.CSV_CUSTOMIZED_TRNX,
                 account_info_dataset=config.CSV_ACCOUNT_INFO,
                 reference_date = 981231,
                 apply_all_steps = True,
                 to_csv = True):

    '''
    This function is built to label main dataset which is created with prepare_transaction_data module. Below steps are followed:
    1. Adjust error in end_date field in account information dataset
    2. Label first individual accounts by taking reference date into consideration
    3. Consider activeness of all accounts belong to the customers and label them as churner if there is no active account anymore

     Args:
            trnx_dataset (Pandas DataFrame): Csv file name which has transaction dataset with at least these fields: "account_id","client_id"
            account_info_dataset (Pandas DataFrame): Csv file name which has account info dataset with at least these fields: "account_id", "start_date", "end_date"
            reference_date (integer): The date to be considered in activeness check of accounts
            apply_all_steps (boolean): True or False
            to_csv (boolean): If the returned dataframe is desired to be written into csv file

        Return:
            labelled_data (pandas DataFrame)

    '''


    df_trnx = read_from_csv(trnx_dataset)
    df_acc = read_from_csv(account_info_dataset)

    if apply_all_steps:

        df_acc = fix_error_in_account_info_dataset(df_acc, df_trnx)
        df_acc = label_accounts(df_acc,reference_date)
        labelled_cust_data = label_customers(df_acc, df_trnx)
        return_data = merge_label_with_main_data(df_trnx, labelled_cust_data)

        if to_csv:

            write_to_csv(return_data,config.CSV_LABELLED_TRNX)

        return return_data

    else:

        return df_trnx, df_acc


def fix_error_in_account_info_dataset(df_acc, df_trnx):


    df_acc = df_acc.merge(
                    df_trnx.groupby("account_id",as_index=False).date.max().rename(columns={'date':'Last_Trnx_Date'}),
                    on="account_id", how="left"
                   )

    df_acc["end_date"] = np.where(df_acc["end_date"] < df_acc["Last_Trnx_Date"], df_acc["Last_Trnx_Date"],df_acc["end_date"])

    return df_acc

def label_accounts(df_acc,reference_date):

    df_acc["active_or_not"] = np.where(df_acc["end_date"] <= reference_date, 0 ,
                                       np.where(df_acc["start_date"]<reference_date,1,0))
    return df_acc

def label_customers(df_acc,df_trnx):

    labelled_cust_data = (df_trnx[["account_id","client_id"]]
                           .drop_duplicates()
                           .merge(df_acc[["account_id","active_or_not"]],on="account_id",how="left")
                          )

    labelled_cust_data = labelled_cust_data.groupby("client_id",as_index=False).active_or_not.sum()
    labelled_cust_data["churn_or_not"] = np.where(labelled_cust_data["active_or_not"] == 0, 1 ,0)

    return labelled_cust_data

def merge_label_with_main_data(df_trnx, labelled_cust_data ):

    return df_trnx.merge(labelled_cust_data[["client_id","churn_or_not"]],on="client_id",how="left")